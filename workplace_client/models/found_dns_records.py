# coding: utf-8

"""
    Workplace Console API

    API for managing email and workplace service subscriptions.

    The version of the OpenAPI document: v1
    Contact: support@truehost.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FoundDnsRecords(BaseModel):
    """
    Found DNS records organized by type
    """ # noqa: E501
    ns: Optional[List[StrictStr]] = Field(default=None, description="Name server records", alias="NS")
    a: Optional[List[StrictStr]] = Field(default=None, description="IPv4 address records", alias="A")
    aaaa: Optional[List[StrictStr]] = Field(default=None, description="IPv6 address records", alias="AAAA")
    cname: Optional[List[StrictStr]] = Field(default=None, description="Canonical name records", alias="CNAME")
    mx: Optional[List[StrictStr]] = Field(default=None, description="Mail exchange records", alias="MX")
    txt: Optional[List[StrictStr]] = Field(default=None, description="Text records", alias="TXT")
    soa: Optional[List[StrictStr]] = Field(default=None, description="Start of authority records", alias="SOA")
    srv: Optional[List[StrictStr]] = Field(default=None, description="Service records", alias="SRV")
    ptr: Optional[List[StrictStr]] = Field(default=None, description="Pointer records", alias="PTR")
    __properties: ClassVar[List[str]] = ["NS", "A", "AAAA", "CNAME", "MX", "TXT", "SOA", "SRV", "PTR"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FoundDnsRecords from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FoundDnsRecords from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "NS": obj.get("NS"),
            "A": obj.get("A"),
            "AAAA": obj.get("AAAA"),
            "CNAME": obj.get("CNAME"),
            "MX": obj.get("MX"),
            "TXT": obj.get("TXT"),
            "SOA": obj.get("SOA"),
            "SRV": obj.get("SRV"),
            "PTR": obj.get("PTR")
        })
        return _obj


