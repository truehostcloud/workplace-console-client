# coding: utf-8

"""
    Workplace Console API

    API for managing email and workplace service subscriptions.

    The version of the OpenAPI document: v1
    Contact: support@truehost.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionInfoCreate200Response(BaseModel):
    """
    SubscriptionInfoCreate200Response
    """ # noqa: E501
    used_emails: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="used-emails")
    remaining_quota: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="remaining-quota")
    remaining_emails: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="remaining-emails")
    allowed_emails: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="allowed-emails")
    allowed_alias: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="allowed-alias")
    remaining_alias: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="remaining-alias")
    allowed_quota: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="allowed-quota")
    __properties: ClassVar[List[str]] = ["used-emails", "remaining-quota", "remaining-emails", "allowed-emails", "allowed-alias", "remaining-alias", "allowed-quota"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionInfoCreate200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionInfoCreate200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "used-emails": obj.get("used-emails"),
            "remaining-quota": obj.get("remaining-quota"),
            "remaining-emails": obj.get("remaining-emails"),
            "allowed-emails": obj.get("allowed-emails"),
            "allowed-alias": obj.get("allowed-alias"),
            "remaining-alias": obj.get("remaining-alias"),
            "allowed-quota": obj.get("allowed-quota")
        })
        return _obj


