# coding: utf-8

"""
    Workplace Console API

    API for managing email and workplace service subscriptions.

    The version of the OpenAPI document: v1
    Contact: support@truehost.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from workplace_client.models.dns_record import DnsRecord
from workplace_client.models.found_dns_records import FoundDnsRecords
from typing import Optional, Set
from typing_extensions import Self

class DnsInfoResponse(BaseModel):
    """
    DnsInfoResponse
    """ # noqa: E501
    domain: StrictStr = Field(description="The domain name that was checked")
    score: Union[StrictFloat, StrictInt] = Field(description="DNS configuration score")
    all_dns_score: Union[StrictFloat, StrictInt] = Field(description="Overall DNS score")
    found: StrictInt = Field(description="Number of required DNS records found")
    total: StrictInt = Field(description="Total number of required DNS records")
    missing_dns: List[DnsRecord] = Field(description="List of missing required DNS records")
    other_missing_dns: List[DnsRecord] = Field(description="List of other missing DNS records")
    found_dns: FoundDnsRecords
    __properties: ClassVar[List[str]] = ["domain", "score", "all_dns_score", "found", "total", "missing_dns", "other_missing_dns", "found_dns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DnsInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in missing_dns (list)
        _items = []
        if self.missing_dns:
            for _item_missing_dns in self.missing_dns:
                if _item_missing_dns:
                    _items.append(_item_missing_dns.to_dict())
            _dict['missing_dns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in other_missing_dns (list)
        _items = []
        if self.other_missing_dns:
            for _item_other_missing_dns in self.other_missing_dns:
                if _item_other_missing_dns:
                    _items.append(_item_other_missing_dns.to_dict())
            _dict['other_missing_dns'] = _items
        # override the default output from pydantic by calling `to_dict()` of found_dns
        if self.found_dns:
            _dict['found_dns'] = self.found_dns.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DnsInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "score": obj.get("score"),
            "all_dns_score": obj.get("all_dns_score"),
            "found": obj.get("found"),
            "total": obj.get("total"),
            "missing_dns": [DnsRecord.from_dict(_item) for _item in obj["missing_dns"]] if obj.get("missing_dns") is not None else None,
            "other_missing_dns": [DnsRecord.from_dict(_item) for _item in obj["other_missing_dns"]] if obj.get("other_missing_dns") is not None else None,
            "found_dns": FoundDnsRecords.from_dict(obj["found_dns"]) if obj.get("found_dns") is not None else None
        })
        return _obj


