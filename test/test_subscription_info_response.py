# coding: utf-8

"""
    Open Xchange Console

    Test description

    The version of the OpenAPI document: v1
    Contact: support@truehost.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from workplace_console_client.models.subscription_info_response import SubscriptionInfoResponse

class TestSubscriptionInfoResponse(unittest.TestCase):
    """SubscriptionInfoResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionInfoResponse:
        """Test SubscriptionInfoResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionInfoResponse`
        """
        model = SubscriptionInfoResponse()
        if include_optional:
            return SubscriptionInfoResponse(
                info = workplace_console_client.models.order_display.OrderDisplay(
                    id = 56, 
                    context_id = -2147483648, 
                    domain = '0', 
                    enabled = True, 
                    average_size = -2147483648, 
                    filestore_id = -2147483648, 
                    filestore_name = '', 
                    max_quota = -2147483648, 
                    context_name = '', 
                    used_quota = -2147483648, 
                    gab_mode = '', 
                    is_order_active = True, 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    unallocated_quota = -2147483648, 
                    unallocated_alias = -2147483648, 
                    is_alias_calculated = True, 
                    is_alias_synched = True, 
                    last_dns_check = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    is_dns_valid = True, 
                    client_id = -2147483648, 
                    is_verified = True, 
                    subscription = 56, ),
                emails = [
                    workplace_console_client.models.email_display.EmailDisplay(
                        id = 56, 
                        name = '0', 
                        email_quota = -2147483648, 
                        max_quota = -2147483648, 
                        used_quota = -2147483648, 
                        email_id = -2147483648, 
                        display_name = '', 
                        order = 56, )
                    ]
            )
        else:
            return SubscriptionInfoResponse(
                info = workplace_console_client.models.order_display.OrderDisplay(
                    id = 56, 
                    context_id = -2147483648, 
                    domain = '0', 
                    enabled = True, 
                    average_size = -2147483648, 
                    filestore_id = -2147483648, 
                    filestore_name = '', 
                    max_quota = -2147483648, 
                    context_name = '', 
                    used_quota = -2147483648, 
                    gab_mode = '', 
                    is_order_active = True, 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    unallocated_quota = -2147483648, 
                    unallocated_alias = -2147483648, 
                    is_alias_calculated = True, 
                    is_alias_synched = True, 
                    last_dns_check = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    is_dns_valid = True, 
                    client_id = -2147483648, 
                    is_verified = True, 
                    subscription = 56, ),
                emails = [
                    workplace_console_client.models.email_display.EmailDisplay(
                        id = 56, 
                        name = '0', 
                        email_quota = -2147483648, 
                        max_quota = -2147483648, 
                        used_quota = -2147483648, 
                        email_id = -2147483648, 
                        display_name = '', 
                        order = 56, )
                    ],
        )
        """

    def testSubscriptionInfoResponse(self):
        """Test SubscriptionInfoResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
